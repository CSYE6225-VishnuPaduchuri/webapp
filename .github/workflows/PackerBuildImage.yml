name: Build Image with Packer

# Taken reference from https://stackoverflow.com/a/61565445/10235939
# to run the workflow only when the pull request is merged

on:
  pull_request:
    types:
      - closed

jobs:
  build:
    name: packer-image-build
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'}}
    runs-on: ubuntu-latest

    # Reading env variables from github secrets
    env:
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USER_NAME: ${{ secrets.DATABASE_USER_NAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_HOST_URL: ${{ secrets.DATABASE_HOST_URL }}
      PACKER_GCP_CREDENTIALS: ${{ secrets.PACKER_GCP_CREDENTIALS }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      IS_TEST_ENVIROMENT: ${{ secrets.IS_TEST_ENVIROMENT }}
      TOPIC_NAME: ${{ secrets.TOPIC_NAME }}
      PROJECT_REGION: ${{ secrets.PROJECT_REGION }}
      NEW_INSTANCE_TEMPLATE_NAME: ${{ secrets.NEW_INSTANCE_TEMPLATE_NAME }}
      INSTANCE_NETWORK_VPC: ${{ secrets.INSTANCE_NETWORK_VPC }}
      INSTANCE_NETWORK_SUBNET: ${{ secrets.INSTANCE_NETWORK_SUBNET }}
      DISK_KMS_KEY: ${{ secrets.DISK_KMS_KEY }}
      SERVICE_ACCOUNT_EMAIL: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
      PRODUCTION_DATABASE_NAME: ${{ secrets.PRODUCTION_DATABASE_NAME }}
      PRODUCTION_DATABASE_USER_NAME: ${{ secrets.PRODUCTION_DATABASE_USER_NAME }}
      PRODUCTION_DATABASE_PASSWORD: ${{ secrets.PRODUCTION_DATABASE_PASSWORD }}
      PRODUCTION_DATABASE_HOST_URL: ${{ secrets.PRODUCTION_DATABASE_HOST_URL }}
      SERVICE_ACCOUNT_SCOPES: ${{ secrets.SERVICE_ACCOUNT_SCOPES }}
      PRODUCTION_MACHINE_TYPE: ${{ secrets.PRODUCTION_MACHINE_TYPE }}
      PRODUCTION_MACHINE_DISK_SIZE: ${{ secrets.PRODUCTION_MACHINE_DISK_SIZE }}

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3

        # Referenced from https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
      - name: install postgres
        run: |
          sudo apt update
          sudo apt install postgresql postgresql-contrib -y
          sudo systemctl start postgresql.service

      - name: Add webaapp log directory under /var/log
        run: |
          sudo mkdir /var/log/webapp

        # Referenced from to create DB, a new user and granting them necessary permissions
        # https://medium.com/@mohammedhammoud/postgresql-create-user-create-database-grant-privileges-access-aabb2507c0aa
      - name: create a new DB and update the user password via secrets
        run: |
          sudo -u postgres psql -c "CREATE DATABASE ${{ env.DATABASE_NAME }};"
          sudo -u postgres psql -c "CREATE USER ${{env.DATABASE_USER_NAME}} PASSWORD '${{env.DATABASE_PASSWORD}}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ env.DATABASE_NAME }} TO ${{ env.DATABASE_USER_NAME }};"

      - name: create env file for webapp
        run: |
          touch .env
          echo "SERVER_PORT=${SERVER_PORT}" >> .env
          echo "DATABASE_NAME=${DATABASE_NAME}" >> .env
          echo "DATABASE_USER_NAME=${DATABASE_USER_NAME}" >> .env
          echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> .env
          echo "DATABASE_HOST_URL=${DATABASE_HOST_URL}" >> .env
          echo "IS_TEST_ENVIROMENT=${IS_TEST_ENVIROMENT}" >> .env
          echo "TOPIC_NAME=${TOPIC_NAME}" >> .env

      - name: Install dependencies
        run: npm install

      - run: npm test
      - run: rm -r node_modules

        # we have added webapp.zip as part of the file provisioner in packer
        # so we need to perform the zip operation and then copy the zip file to the current directory
      - name: Zip the webapp folder
        run: |
          cd ../
          zip -r webapp.zip webapp
          cd -
          cp ../webapp.zip .

      - name: Install Packer
        run: |
          sudo apt-get update
          sudo apt-get install packer

      - name: Initialize Packer
        run: packer init ./packer

      - name: Run packer validate command to check if configuration is valid or not
        run: packer validate ./packer

      # Referenced from https://github.com/google-github-actions/setup-gcloud
      - name: Authentication with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.PACKER_GCP_CREDENTIALS }}

      - name: Add google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: GCloud Info
        run: gcloud info

      - name: Build Image using Packer
        id: packer_build_image
        run: |
          packer build -var 'gcp_project_id=${{ env.GCP_PROJECT_ID }}' ./packer  | tee packer_output.txt
          image_id=$(grep 'A disk image was created' packer_output.txt | awk '{print $12}')
          echo "::set-output name=image_id::$image_id"

      - name: New Instance Template
        run: |
          echo "Image ID in Build: ${{ steps.packer_build_image.outputs.image_id }}"
          gcloud compute instance-templates create ${{ env.NEW_INSTANCE_TEMPLATE_NAME }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --instance-template-region=${{ env.PROJECT_REGION }} \
          --region=${{ env.PROJECT_REGION }} \
          --machine-type=${{ env.PRODUCTION_MACHINE_TYPE }} \
          --image=projects/${{ env.GCP_PROJECT_ID }}/global/images/${{ steps.packer_build_image.outputs.image_id }} \
          --description="Template via CD" \
          --network=${{ env.INSTANCE_NETWORK_VPC }} \
          --subnet=${{ env.INSTANCE_NETWORK_SUBNET }} \
          --boot-disk-type=pd-balanced  \
          --boot-disk-size=${{ env.PRODUCTION_MACHINE_DISK_SIZE }}  \
          --boot-disk-auto-delete \
          --tags=webapp-vm-firewall-tag \
          --boot-disk-kms-key=${{ env.DISK_KMS_KEY }} \
          --metadata=startup-script="#!/bin/bash
            set -e

            ENV_FILE="/opt/csye6225/webapp/.env"
            SERVER_PORT=8080
            DATABASE_NAME=${{ env.PRODUCTION_DATABASE_NAME }}
            DATABASE_USER_NAME=${{ env.PRODUCTION_DATABASE_USER_NAME }}
            DATABASE_PASSWORD=${{ env.PRODUCTION_DATABASE_PASSWORD }}
            DATABASE_HOST_URL=${{ env.PRODUCTION_DATABASE_HOST_URL}}
            IS_TEST_ENVIROMENT=false
            TOPIC_NAME=verify_email

            if [ -f \"\$ENV_FILE\" ]; then
                echo \"Env file exists.\"
                sudo sed -i \"s/^SERVER_PORT=.*/SERVER_PORT=\$SERVER_PORT/\" \"\$ENV_FILE\"
                sudo sed -i \"s/^DATABASE_NAME=.*/DATABASE_NAME=\$DATABASE_NAME/\" \"\$ENV_FILE\"
                sudo sed -i \"s/^DATABASE_USER_NAME=.*/DATABASE_USER_NAME=\$DATABASE_USER_NAME/\" \"\$ENV_FILE\"
                sudo sed -i \"s/^DATABASE_PASSWORD=.*/DATABASE_PASSWORD=\$DATABASE_PASSWORD/\" \"\$ENV_FILE\"
                sudo sed -i \"s/^DATABASE_HOST_URL=.*/DATABASE_HOST_URL=\$DATABASE_HOST_URL/\" \"\$ENV_FILE\"
                sudo sed -i \"s/^IS_TEST_ENVIROMENT=.*/IS_TEST_ENVIROMENT=\$IS_TEST_ENVIROMENT/\" \"\$ENV_FILE\"
                sudo sed -i \"s/^TOPIC_NAME=.*/TOPIC_NAME=\$TOPIC_NAME/\" \"\$ENV_FILE\"
            else
                echo \"File does not exist.\"
                sudo sh -c \"echo 'SERVER_PORT=\$SERVER_PORT' > \$ENV_FILE\"
                sudo sh -c \"echo 'DATABASE_NAME=\$DATABASE_NAME' >> \$ENV_FILE\"
                sudo sh -c \"echo 'DATABASE_USER_NAME=\$DATABASE_USER_NAME' >> \$ENV_FILE\"
                sudo sh -c \"echo 'DATABASE_PASSWORD=\$DATABASE_PASSWORD' >> \$ENV_FILE\"
                sudo sh -c \"echo 'DATABASE_HOST_URL=\$DATABASE_HOST_URL' >> \$ENV_FILE\"
                sudo sh -c \"echo 'IS_TEST_ENVIROMENT=\$IS_TEST_ENVIROMENT' >> \$ENV_FILE\"
                sudo sh -c \"echo 'TOPIC_NAME=\$TOPIC_NAME' >> \$ENV_FILE\"
            fi

            sudo systemctl daemon-reload
            sudo systemctl restart webapp
            sudo systemctl daemon-reload

            echo \"Test=NewTemplate\" >> /tmp/.testEnv
            " \
          --service-account=${{ env.SERVICE_ACCOUNT_EMAIL }} \
          --scopes=${{ env.SERVICE_ACCOUNT_SCOPES }}

      - name: Start Rolling Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update webapp-instance-group \
          --version=template=https://compute.googleapis.com/compute/v1/projects/${{ env.GCP_PROJECT_ID }}/regions/${{ env.PROJECT_REGION }}/instanceTemplates/${{ env.NEW_INSTANCE_TEMPLATE_NAME }} \
          --region=${{ env.PROJECT_REGION }}

      - name: Monitoring Updates
        run: |
          gcloud compute instance-groups managed wait-until webapp-instance-group \
          --version-target-reached \
          --region=${{ env.PROJECT_REGION }}
